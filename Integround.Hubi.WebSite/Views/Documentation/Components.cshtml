@{
    ViewBag.Title = "Integround Components - Documentation";
}

<div class="jumbotron">
    <h1>Integround.Components</h1>
    <p>
        Documentation and developer tutorials for Integround Components.
    </p>
</div>
<hr />
<div class="row">
    <div class="col-md-3 hidden-sm">
        <nav id="nav-scrollspy" class="affix-top" data-spy="affix" data-offset-top="290">
            <ul class="nav nav-toc">
                <li>
                    <a href="#core">Integround.Components.Core</a>
                    <ul class="nav nav-toc nav-toc-sub">
                        <li>
                            <a href="#core-message">Message</a>
                        </li>
                        <li>
                            <a href="#core-iprocess">IProcess</a>
                        </li>
                        <li>
                            <a href="#core-iprocesscallable">IProcessCallable</a>
                        </li>
                        <li>
                            <a href="#core-ischeduler">IScheduler</a>
                        </li>
                        <li>
                            <a href="#core-processconfiguration">ProcessConfiguration</a>
                        </li>
                        <li>
                            <a href="#core-processparameters">ProcessParameters</a>
                        </li>
                        <li>
                            <a href="#core-processstatus">ProcessStatus</a>
                        </li>
                    </ul>
                </li>
            </ul>
        </nav>
    </div>
    <div class="col-md-9 col-sm-12 doc-container">
        <a id="core" class="anchor"></a>
        <h1 class="page-header">Integround.Components.Core</h1>
        <p>
            Integround.Components.Core namespace contains the most basic classes for building custom integration processes.
        </p>
        <div>
            <a id="core-message" class="anchor"></a>
            <h2 class="page-header">Message</h2>
            <p>
                Message class is the basis of delivering messages in integrations.
                It contains message metadata as key-value pair parameters and the message payload as a stream
            </p>
            <h3>Constructors</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Message()</td>
                        <td>Constructs an empty object.</td>
                    </tr>
                    <tr>
                        <td>Message(Stream stream)</td>
                        <td>Constructs an object and sets the content stream.</td>
                    </tr>
                </tbody>
            </table>
            <h3>Properties</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Properties</td>
                        <td>ConcurrentDictionary&lt;string, string&gt;</td>
                        <td>Contains message's metadata as key-value pairs.</td>
                    </tr>
                    <tr>
                        <td>ContentStream</td>
                        <td>Stream</td>
                        <td>Contains the message's payload.</td>
                    </tr>
                </tbody>
            </table>
            <h3>Methods</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>CreateFromStringAsync(string)</td>
                        <td>Message</td>
                        <td>Constructs a Message object and loads the given string to ContentStream.</td>
                    </tr>
                    <tr>
                        <td>CreateFromObject&lt;T&gt;(T)</td>
                        <td>Message</td>
                        <td>Constructs a Message object and uses the XmlSerializer to load the object to ContentStream.</td>
                    </tr>
                    <tr>
                        <td>ExtractObject&lt;T&gt;(Message)</td>
                        <td>T</td>
                        <td>Uses XmlSerializer to deserialize ContentStream to an object of the requested type.</td>
                    </tr>
                    <tr>
                        <td>Dispose()</td>
                        <td>void</td>
                        <td>Disposes the Message resources.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-iprocess" class="anchor"></a>
            <h2 class="page-header">IProcess</h2>
            <p>
                IProcess interface describes an integration process.
                The process can be started and stopped and it executes its logic independently.
                For example, it can be a long running process or exceuted periodically.
                The interface contains operations to start, stop and configure the process.
            </p>
            <h3>Properties</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Name</td>
                        <td>string</td>
                        <td>Name of the process.</td>
                    </tr>
                    <tr>
                        <td>Status</td>
                        <td>ProcessStatus</td>
                        <td>Status of the process.</td>
                    </tr>
                </tbody>
            </table>
            <h3>Methods</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Initialize(ProcessConfiguration, ILogger)</td>
                        <td>void</td>
                        <td>Initializes the process with the configurations values and a ILogger object.</td>
                    </tr>
                    <tr>
                        <td>Start(params Message[])</td>
                        <td>void</td>
                        <td>Starts the process with optional input parameters.</td>
                    </tr>
                    <tr>
                        <td>Stop())</td>
                        <td>void</td>
                        <td>Stops the execution of the process.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-iprocesscallable" class="anchor"></a>
            <h2 class="page-header">IProcessCallable</h2>
            <p>IProcessCallable interface describes a process that is executed by calling it from outside. Is inherited from IProcess</p>
            <h3>Methods</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>CallAsync(params Message[])</td>
                        <td>Message</td>
                        <td>Executes the process once with optional input parameters. Returns a process result as a Message object.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-ischeduler" class="anchor"></a>
            <h2 class="page-header">IScheduler</h2>
            <p>IScheduler interface describes a component that can be used for scheduling purposes.</p>
            <h3>Methods</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Start()</td>
                        <td>void</td>
                        <td>Starts the scheduler instance.</td>
                    </tr>
                    <tr>
                        <td>Stop()</td>
                        <td>void</td>
                        <td>Stops the scheduler instance.</td>
                    </tr>
                </tbody>
            </table>
            <h3>Events</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Trigger</td>
                        <td>EventHandler&lt;MessageEventArgs&gt;</td>
                        <td>Trigger event raised by the scheduler instance.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-processconfiguration" class="anchor"></a>
            <h2 class="page-header">ProcessConfiguration</h2>
            <p>Describes the configuration of a process.</p>
            <h3>Properties</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Name</td>
                        <td>string</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>Status</td>
                        <td>ProcessStatus</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>Parameters</td>
                        <td>ProcessParameters</td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-processparameters" class="anchor"></a>
            <h2 class="page-header">ProcessParameters</h2>
            <p>Describes a collection of process parameters.</p>
            <h3>Constructors</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>ProcessParameters(IDictionary&lt;string, string&gt;)</td>
                        <td>Constructs the ProcessParameters instances and loads parameters from the given IDictionary collection.</td>
                    </tr>
                </tbody>
            </table>
            <h3>Methods</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>this[string]</td>
                        <td>string</td>
                        <td>Finds and returns the value corresponding to the given parameter name.</td>
                    </tr>
                    <tr>
                        <td>Get(string)</td>
                        <td>string</td>
                        <td>Finds and returns the value corresponding to the given parameter name.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
            <a id="core-processstatus" class="anchor"></a>
            <h2 class="page-header">ProcessStatus</h2>
            <p>Enumeration describing the process status values.</p>
            <h3>Values</h3>
            <table class="table table-bordered">
                <thead>
                    <tr class="active">
                        <td>Name</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Stopped</td>
                        <td>Process is in the Stopped state.</td>
                    </tr>
                    <tr>
                        <td>Started</td>
                        <td>Process is in the Started state.</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

